@page "/Account/Login"

<style>
    body {
        background: linear-gradient(to right, #3da4dc, var(--mainColor));
    }

    .@sidebarClass {
        display: none;
    }
</style>

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using SkillForge.Components.Account
@using SkillForge.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Sign_In> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Sign-In</PageTitle>

<div class="wrapper">
    <div class="form-container sign-up">
    </div>
    <div class="form-container">
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <h2>Login</h2>
            <div class="form-group">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Email" />
                <i class="fas fa-user"></i>
                <ValidationMessage For="@(() => Input.Email)" class="text-danger" />
            </div>
            <div class="form-group">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Password" />
                <i class="fas fa-lock"></i>
                <ValidationMessage For="@(() => Input.Password)" class="text-danger" />
            </div>
            <div class="forgot-pass">
                <a href="Account/ForgotPassword">Forgot password?</a>
            </div>
            <button type="submit" class="btn">Login</button>
            <div class="link">
                <p>Don't have an account? <a href="/Account/Register" class="signup-link">Sign up</a></p>
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="text-danger">@errorMessage</p>
            }
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;
    private string sidebarClass = "open"; // Default to open

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo("Home");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
