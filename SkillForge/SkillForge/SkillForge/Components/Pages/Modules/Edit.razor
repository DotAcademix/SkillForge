@page "/module/{moduleId}/edit"

@using SkillForge.Core.Services.Abstraction
@using SkillForge.Data.Entities
@using SkillForge.Models.Modules
@using AutoMapper
@using Microsoft.AspNetCore.Components.Forms

@inject IModuleService moduleService
@inject NavigationManager NavManager
@inject IMapper mapper

<h3 class="text-2xl font-bold text-gray-800 mb-4 text-center">Edit Module</h3>

@if (isLoading)
{
    <p class="text-center text-gray-500">Loading module details...</p>
}
else if (Module == null)
{
    <p class="text-center text-red-500">Module not found.</p>
}
else
{
    <EditForm Model="Module" OnValidSubmit="UpdateModule">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Name:</label>
            <InputText @bind-Value="Module.Name" class="form-control" />
            <ValidationMessage For="@(() => Module.Name)" />
        </div>

        <div>
            <label>Content:</label>
            <InputTextArea @bind-Value="Module.Content" class="form-control" />
            <ValidationMessage For="@(() => Module.Content)" />
        </div>

        <div>
            <label>Video URL:</label>
            <InputTextArea @bind-Value="Module.VideoUrl" class="form-control" />
            <ValidationMessage For="@(() => Module.VideoUrl)" />
        </div>

        <!-- Video Thumbnail Preview -->
        @if (!string.IsNullOrEmpty(Module.VideoUrl) && IsValidYouTubeUrl(Module.VideoUrl))
        {
            var thumbnailUrl = GetYouTubeThumbnailUrl(Module.VideoUrl);
            <div class="mt-3">
                <h5>Video Preview:</h5>
                <img src="@thumbnailUrl" alt="Video Thumbnail" class="w-32 h-32 object-cover rounded-md" />
            </div>
        }

        <div class="mt-4">
            <button type="submit" class="btn btn-primary">Update Module</button>
            <button type="button" class="btn btn-secondary ml-2" @onclick="CancelEdit">Cancel</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public string? moduleId { get; set; }
    public ModuleViewModel? Module { get; set; } = new();
    private bool isLoading = true;
    private CancellationToken cancellationToken = new();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(moduleId))
        {
            Module = null;
            isLoading = false;
            return;
        }

        try
        {
            var moduleEntity = await moduleService.GetByIdAsync(moduleId, cancellationToken);
            Module = mapper.Map<ModuleViewModel>(moduleEntity);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching module: {ex.Message}");
            Module = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateModule()
    {
        if (Module == null) return;

        try
        {
            var moduleEntity = mapper.Map<Module>(Module);
            await moduleService.UpdateAsync(moduleEntity, cancellationToken);
            NavManager.NavigateTo($"/module/{moduleId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating module: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        NavManager.NavigateTo($"/module/{moduleId}");
    }

    private bool IsValidYouTubeUrl(string url)
    {
        return Uri.TryCreate(url, UriKind.Absolute, out Uri? uri) && uri.Host.Contains("youtube.com");
    }

    private string GetYouTubeThumbnailUrl(string url)
    {
        var videoId = ExtractYouTubeVideoId(url);
        return videoId != null ? $"https://img.youtube.com/vi/{videoId}/hqdefault.jpg" : string.Empty;
    }

    private string? ExtractYouTubeVideoId(string url)
    {
        var regex = new System.Text.RegularExpressions.Regex(@"(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]+)");
        var match = regex.Match(url);
        return match.Success ? match.Groups[1].Value : null;
    }
}
