@page "/course/{courseId}/module/create"
@rendermode RenderMode.InteractiveServer

@using SkillForge.Core.Prototypes
@using SkillForge.Core.Services.Abstraction
@using SkillForge.Data.Entities
@using SkillForge.Models.Modules
@using AutoMapper
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using SkillForge.Data.Enums

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject IModuleService moduleService
@inject ICourseService courseService
@inject IMapper mapper

@attribute [Authorize(Roles = $"{Role.Admin},{Role.Instructor}")]

<h3>Create a New Module</h3>

<EditForm Model="Module" OnValidSubmit="CreateModule" FormName="ModuleForm">
    <ChildContent Context="moduleContext">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div>
            <label>Name:</label>
            <InputText @bind-Value="Module.Name" class="form-control"/>
            <ValidationMessage For="@(() => Module.Name)"/>
        </div>

        <div>
            <label>Content:</label>
            <InputTextArea @bind-Value="Module.Content" class="form-control"/>
            <ValidationMessage For="@(() => Module.Content)"/>
        </div>
        <div>
            <label>Video URL:</label>
            <InputTextArea @bind-Value="Module.VideoUrl" class="form-control"/>
            <ValidationMessage For="@(() => Module.VideoUrl)"/>
        </div>

        <!-- Video Thumbnail Preview -->
        @if (!string.IsNullOrEmpty(Module.VideoUrl) && IsValidYouTubeUrl(Module.VideoUrl))
        {
            var thumbnailUrl = GetYouTubeThumbnailUrl(Module.VideoUrl);
            <div class="mt-3">
                <h5>Video Preview:</h5>
                <img src="@thumbnailUrl" alt="Video Thumbnail" class="w-32 h-32 object-cover rounded-md"/>
            </div>
        }

        <button type="submit" class="btn btn-primary">Create Module</button>
    </ChildContent>
</EditForm>

@code {
    [Parameter] public string? courseId { get; set; }

    [SupplyParameterFromForm(FormName = "ModuleForm")]
    public ModuleViewModel Module { get; set; } = new();

    CancellationToken cancellationToken = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
    }

    public async Task CreateModule()
    {
        var moduleEntity = mapper.Map<SkillForge.Data.Entities.Module>(Module);
        var course = await courseService.GetByIdAsync(courseId, cancellationToken);
        moduleEntity.Course = course;
        //course.Modules.Add(moduleEntity);
        var coursePrototype = mapper.Map<CoursePrototype>(course);
        courseService.UpdateAsync(courseId, coursePrototype, cancellationToken);
        var modulePrototypeEntity = mapper.Map<ModulePrototype>(moduleEntity);

        await moduleService.CreateAsync(modulePrototypeEntity, cancellationToken);

        // Navigate back to module list or show success message
        NavManager.NavigateTo($"/course/{courseId}");
    }

    // Function to check if the URL is a valid YouTube URL
    private bool IsValidYouTubeUrl(string url)
    {
        return Uri.TryCreate(url, UriKind.Absolute, out Uri? uri) && uri.Host.Contains("youtube.com");
    }

    // Function to extract the thumbnail URL for a YouTube video
    private string GetYouTubeThumbnailUrl(string url)
    {
        var videoId = ExtractYouTubeVideoId(url);
        return videoId != null ? $"https://img.youtube.com/vi/{videoId}/hqdefault.jpg" : string.Empty;
    }

    // Function to extract YouTube Video ID from the URL
    private string? ExtractYouTubeVideoId(string url)
    {
        var regex = new System.Text.RegularExpressions.Regex(@"(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]+)");
        var match = regex.Match(url);
        return match.Success ? match.Groups[1].Value : null;
    }

}
