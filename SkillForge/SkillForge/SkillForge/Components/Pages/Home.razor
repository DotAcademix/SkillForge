@page "/Home"
@rendermode RenderMode.InteractiveServer

@using Microsoft.AspNetCore.Identity
@using SkillForge.Data
@using SkillForge.Data.Entities
@using SkillForge.Core.Services.Abstraction
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using SkillForge.Data.Enums
@using SkillForge.Data.Repositories.Abstraction

@inject ICourseService courseService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoleManager<IdentityRole> RoleManager
@inject UserManager<ApplicationUser> UserManager

<style>
    main {
        padding: min(30px, 7%);
        grid-area: main;
    }

    h1 {
        border-bottom: 2px solid;
    }
</style>

<PageTitle>Home</PageTitle>

<h1>Welcome to SkillForge</h1>

<main>


    <h4 class="mt-6">Instructors</h4>
    @if (Instructors.Any())
    {
            @foreach (var instructor in Instructors)
            {
                <MudStack>
                    <MudPaper Class="pa-3"><strong>@instructor.FirstName @instructor.LastName</strong> <p>@instructor.Email</p></MudPaper>
                </MudStack>
                <br>
            }
    }
    else
    {
        <p>No instructors found.</p>
    }
</main>

@code {
    private List<Course> AvailableCourses = new();
    private List<ApplicationUser> Instructors = new();
    private ApplicationUser CurrentUser;
    private List<string> userRole = [];
    CancellationToken cancellationToken = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        await LoadInstructors();

        if (user.Identity.IsAuthenticated)
        {
            var roleClaim = user.FindAll(ClaimTypes.Role);
            if (roleClaim != null)
            {
                userRole = roleClaim.Select(r => r.Value).ToList(); // Assign user role
            }
        }
    }


    private async Task LoadInstructors()
    {
        var instructorRole = await RoleManager.FindByNameAsync("Instructor");

        if (instructorRole != null)
        {
            var usersInRole = await UserManager.GetUsersInRoleAsync("Instructor");
            Instructors = usersInRole.ToList();
        }
    }
}
