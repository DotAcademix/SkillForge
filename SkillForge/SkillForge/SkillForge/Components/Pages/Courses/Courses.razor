@page "/courses"
@rendermode RenderMode.InteractiveServer

@using SkillForge.Core.Services.Abstraction
@using SkillForge.Data.Entities
@using SkillForge.Data.Enums
@using SkillForge.Models.Courses

@inject ICourseService CourseService
@inject NavigationManager NavManager
@inject IJSRuntime JS //later fix

<h2 class="text-3xl font-bold mb-6 text-center">Available Courses</h2>

@if (courses == null)
{
    <p class="text-center text-gray-500">Loading courses...</p>
}
else if (courses.Count == 0)
{
    <p class="text-center text-gray-500">No courses available.</p>
}
else
{
    <MudGrid Spacing="6" Justify="Justify.Center">
        @foreach (var course in courses)
        {
            string localId = course.Id;
            <MudItem>
                <MudPaper Class="d-flex flex-column align-center py-6 px-4"
                          Style="border: 5px solid transparent;
                             border-image: linear-gradient(to right, #3da4dc, var(--mainColor)) 1;"
                          Height="220px" Width="370px">

                    <MudText Typo="Typo.h4" Class="text-center">@course.Name</MudText>

                    <div class="d-flex justify-between mt-4" style="width: 100%;">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   @onclick="async () => await OpenCourse(localId)">
                            View Course
                        </MudButton>
                        <AuthorizeView Roles="@Role.Admin">
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Warning"
                                       @onclick="async () => await EditCourse(localId)">
                                Edit
                            </MudButton>

                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Error"
                                       @onclick="async () => await DeleteCourse(localId)">
                                Delete
                            </MudButton>
                        </AuthorizeView>
                    </div>

                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}

@code {
    CancellationToken cancellationToken;
    private List<SkillForge.Data.Entities.Course> courses;

    protected override async Task OnInitializedAsync()
    {
        var coursesResult = await CourseService.GetAllAsync(cancellationToken);
        courses = coursesResult.ToList();
    }

    private async Task OpenCourse(string courseId)
    {
        NavManager.NavigateTo($"/course/{courseId}");
    }
    private async Task EditCourse(string courseId)
    {
        NavManager.NavigateTo($"/course/{courseId}/edit");
    }

    private async Task DeleteCourse(string courseId)
    {
        bool confirmDelete = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this course?");
        if (!confirmDelete) return;

        try
        {
            await CourseService.DeleteAsync(courseId, cancellationToken);
            courses = courses.Where(c => c.Id != courseId).ToList(); // Update UI
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting course: {ex.Message}");
        }
    }

}
