@page "/course/{courseId}"
@rendermode RenderMode.InteractiveServer

@using AutoMapper
@using SkillForge.Core.Services.Abstraction
@using SkillForge.Data.Entities
@using SkillForge.Models.Courses
@using System.Security.Claims
@using SkillForge.Data.Enums
@using MudBlazor

@inject ICourseService courseService
@inject IModuleService moduleService
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

<h2 class="text-3xl font-bold text-gray-800 mb-4 text-center">Course Details</h2>

@if (isLoading)
{
    <p class="text-center text-gray-500">Loading course details...</p>
}
else if (course == null)
{
    <p class="text-center text-red-500">Course not found.</p>
}
else
{
    <div class="max-w-3xl mx-auto bg-white rounded-2xl shadow-lg p-6">
        <h3 class="text-2xl font-semibold text-gray-900">@course.Name</h3>
        <p class="text-gray-600 mt-2">@course.Description</p>

        <h4 class="mt-4 font-semibold text-lg">Modules:</h4>
        @if (course.Modules.Count > 0)
        {
            <ul class="list-disc list-inside text-gray-700">
                <MudGrid Spacing="6" Justify="Justify.Center">
                    @foreach (var module in course.Modules)
                    {
                        <MudItem>
                            <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8"
                                      Style="border: 5px solid transparent;
                         border-image: linear-gradient(to right, #3da4dc, var(--mainColor)) 1;cursor: pointer;"
                                      Height="160px" Width="260px"
                                      @onclick="async () => await OpenModule(module.Id)">

                                <div class="text-center cursor-pointer">
                                    <strong>@module.Name</strong>
                                </div>
                                @if (userRole.Contains(Role.Admin) || userRole.Contains(Role.Instructor))
                                {
                                    <div class="mt-3 d-flex gap-2">
                                        <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                                                   Size="Size.Small" @onclick="() => EditModule(module.Id)">
                                            ✏️ Edit
                                        </MudButton>

                                        <MudButton Variant="Variant.Outlined" Color="Color.Error"
                                                   Size="Size.Small"
                                                   @onclick="async () => await DeleteModule(module.Id)">
                                            🗑 Delete
                                        </MudButton>
                                    </div>
                                }
                                <AuthorizeView Roles="@Role.Student">
                                    <MudButton Variant="Variant.Outlined"
                                               Color="Color.Primary"
                                               @* @onclick="//add enrollment" *@
                                               >
                                        Enroll
                                    </MudButton>
                                </AuthorizeView>
                            </MudPaper>
                        </MudItem>
                    }
                    @if (userRole.Contains(Role.Admin) || userRole.Contains(Role.Instructor))
                    {
                        <MudItem>
                            <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8"
                                      Style="border: 5px solid transparent;
                         border-image: linear-gradient(to right, #3da4dc, var(--mainColor)) 1;
                         cursor: pointer;"
                                      Height="160px" Width="260px"
                                      @onclick="CreateModule">

                                <div class="text-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large"
                                             Class="text-primary mb-2" />
                                    <strong class="text-gray-700">Create New Module</strong>
                                </div>
                            </MudPaper>
                        </MudItem>
                    }
                </MudGrid>
            </ul>
        }

        else
        {
            if (userRole.Contains(Role.Admin) || userRole.Contains(Role.Instructor))@*This button in the navigation menu appers on;y tho thosew users who have the role Admin and Instructor*@
            {
                <MudGrid Spacing="6" Justify="Justify.Center">
                    <MudItem>
                        <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8"
                                  Style="border: 5px solid transparent;
                         border-image: linear-gradient(to right, #3da4dc, var(--mainColor)) 1;
                         cursor: pointer;"
                                  Height="160px" Width="260px"
                                  @onclick="CreateModule">

                            <div class="text-center">
                                <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Class="text-primary mb-2" />
                                <strong class="text-gray-700">Create New Module</strong>
                            </div>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            }
            else
            {
                <p class="text-gray-500">No modules available.</p>
            }
        }

        <div class="mt-6">
            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       @onclick="async () => await GoBack()">
                ← Back to Courses
            </MudButton>
        </div>
    </div>
}
@inject IMapper mapper

@code {
    [Parameter] public string? courseId { get; set; }
    private CourseViewModel? course; 
    private bool isLoading = true;
    private List<string> userRole = [];

    private CancellationToken cancellationToken = new();

    protected override async Task OnInitializedAsync() //When you open this page, the method here checks if the user is authenticated and if there are courses
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (string.IsNullOrEmpty(courseId))
        {
            course = null;
            isLoading = false;
            return;
        }

        if (user.Identity.IsAuthenticated)
        {
            var roleClaim = user.FindAll(ClaimTypes.Role);
            if (roleClaim != null)
            {
                userRole = roleClaim.Select(r => r.Value).ToList(); // Assign user role
            }
        }

        try
        {
            var courseEntity = await courseService.GetByIdAsync(courseId, cancellationToken);

            course = mapper.Map<CourseViewModel>(courseEntity);

            if (course == null)
            {
                Console.WriteLine($"Course with ID {courseId} not found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching course: {ex.Message}");
            course = null;
        }
        finally
        {
            isLoading = false; // finally here if there are courses the boolian IsLoading becames false and the modules are displayed
        }
    }

    private async Task GoBack()
    {
        NavManager.NavigateTo("/courses");
    }

    private async Task OpenModule(string moduleId)
    {
        NavManager.NavigateTo($"course/{courseId}/module/{moduleId}");
    }

    private async Task EditModule(string moduleId)
    {
        NavManager.NavigateTo($"course/{courseId}/module/{moduleId}/edit");
    }

    private async Task CreateModule()
    {
        if (!string.IsNullOrEmpty(courseId))
            NavManager.NavigateTo($"course/{courseId}/module/create");
    }

    private async Task DeleteModule(string moduleId)
    {
        if (course == null || course.Modules == null) return;

        bool confirmDelete = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this module?");
        if (!confirmDelete) return;

        try
        {
            await moduleService.DeleteAsync(moduleId, cancellationToken);
            course.Modules = course.Modules.Where(m => m.Id != moduleId).ToList(); // Remove from UI
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting module: {ex.Message}");
        }
    }

}