@implements IDisposable
<!-- Bootstrap CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<!-- Bootstrap JS Bundle (Dropdowns, Modals, etc.) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

<style>


    #sidebar {
        grid-area: sidebar;
        width: 250px;
        height: 100vh;
        background: #f8f9fa;
        position: fixed;
        left: 0;
        top: 0;
        overflow-x: hidden;
        transition: all 0.3s;
        padding-top: 20px;
    }

    .nav-item .nav-link {
        color: #333;
        font-weight: 500;
        padding: 12px;
        display: flex;
        align-items: center;
    }

        .nav-item .nav-link span {
            margin-right: 10px;
        }

    .nav-item .dropdown-btn {
        background: none;
        border: none;
        color: #333;
        font-weight: 500;
        padding: 12px;
        width: 100%;
        text-align: left;
        display: flex;
        align-items: center;
        cursor: pointer;
    }

    .sub-menu {
        display: none;
        padding-left: 20px;
    }

        .sub-menu.show {
            display: block;
        }

    .dropdown-btn-custom {
        background: transparent;
        border: none;
        color: black;
        padding: 10px 21px;
        transition: background 0.3s ease, color 0.3s ease;
        display: flex;
        width: 100%;
    }

        .dropdown-btn-custom:hover,
        .dropdown-btn-custom:focus {
            background: linear-gradient(to right, #3da4dc, var(--mainColor));
            color: white;
        }

        .dropdown-btn-custom::after {
            border: none;
        }

    .nav-link {
        background: transparent;
        border: none;
        color: black;
        padding: 8px 15px;
        transition: background 0.3s ease, color 0.3s ease;
        width: 100%;
    }

        .nav-link:hover,
        .nav-link:focus {
            background: linear-gradient(to right, #3da4dc, var(--mainColor));
            color: white;
            border-radius: 0.5rem;
        }

        .nav-link::after {
            border: none;
        }

    .navbar-brand {
        font-weight: 700;
        background: linear-gradient(to right, #3da4dc, var(--mainColor));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        display: inline-block;
        font-size: 1.2rem;
        letter-spacing: 1px;
    }

</style>


<div id="sidebar" class="@sidebarClass">
    <nav class="nav flex-column">
        <AuthorizeView>
            <Authorized>
                <div class="top-row ps-3 navbar navbar-dark">
                    <div class="container-fluid">
                        <NavLink class="navbar-brand" href="/Home">DotAcademix</NavLink>
                    </div>
                </div>


                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/home">
                        <span class="bi bi-house-door-fill" aria-hidden="true"></span> Home
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <div class="dropdown">
                        <button class="btn dropdown-btn-custom dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <span class="bi bi-book-half" aria-hidden="true"></span> Courses
                        </button>
                        <ul class="dropdown-menu">
                            <li><NavLink class="dropdown-item" href="art">Art</NavLink></li>
                            <li><NavLink class="dropdown-item" href="en">English</NavLink></li>
                            <li><NavLink class="dropdown-item" href="mth">Mathematics</NavLink></li>
                            <li><NavLink class="dropdown-item" href="prg">Programming</NavLink></li>
                        </ul>
                    </div>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="profile">
                        <span class="bi bi-person-fill" aria-hidden="true"></span> Account
                    </NavLink>
                </div>
                @if (userRole == "Instructor" || userRole == "Admin")
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="weather">
                            <span class="bi bi-person-fill" aria-hidden="true"></span> New course
                        </NavLink>
                    </div>
                }
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken/>
                        <input type="hidden" name="ReturnUrl" value=""/>
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private bool showCourses = false;
    private string? currentUrl;
    private string sidebarClass = "open"; // Default to open
    private string userRole = "";

    protected override void OnInitialized()
    {

        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var roleClaim = user.FindFirst(ClaimTypes.Role);
            if (roleClaim != null)
            {
                userRole = roleClaim.Value; // Assign user role
            }
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private void ToggleCourses()
    {
        showCourses = !showCourses;
    }

    private void ToggleSidebar()
    {
        sidebarClass = sidebarClass == "open" ? "close" : "open";
        StateHasChanged(); // Force UI to update
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}
